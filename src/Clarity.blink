
kernel ClarityKernel : ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessRandom, eEdgeClamped> src;
  Image<eWrite> dst;

  param:
    float4 contrast;
    float pivot;
    int scale;

  local:

    float3 _coefficients;
    float _saturation;
    float4 output;
    float4 normaliser;

  void define() {
    defineParam(contrast, "contrast", {1.0f, 1.0f, 1.0f, 1.0f});
    defineParam(pivot, "pivot", 0.18f);
    defineParam(scale, "scale", 5);
  }
  void init() {
    _coefficients.x = 0.2126f;
    _coefficients.y = 0.7152f;
    _coefficients.z = 0.0722f;
    _saturation = ((((contrast.x + contrast.y + contrast.z)/3.0f) - 1.0f) * 0.1) + 1.0f;
  }

  void process(int2 pos) {

    for(int X = -scale; X <= scale; X++){
      for(int Y = -scale; Y <= scale; Y++){
        output += src(pos.x+X,pos.y+Y) * (max((scale - (sqrt(pow(X,2) + pow(Y,2)))),0.0f) /scale) ;
        normaliser += (max((scale - (sqrt(pow(X,2) + pow(Y,2)))),0.0f) /scale);
      }
    }
    output/=normaliser;
    float4 mask = src(pos.x, pos.y) - output;
    mask = max(mask.x, max(mask.y, mask.z));
    output = ((1.0f - mask) * src(pos.x, pos.y)) + mask * (pow(src(pos.x, pos.y) / pivot, contrast) * pivot);

    float luma = output.x * _coefficients.x
               + output.y * _coefficients.y
               + output.z * _coefficients.z;

    dst() = (output - luma) * _saturation + luma;;
  }
};
